diff --git a/net/minecraft/command/EntitySelector.java b/net/minecraft/command/EntitySelector.java
index 473f272..d3d74a9 100644
--- a/net/minecraft/command/EntitySelector.java
+++ b/net/minecraft/command/EntitySelector.java
@@ -93,7 +93,7 @@
 
    @Nullable
    public static ITextComponent matchEntitiesToTextComponent(ICommandSender var0, String var1) throws CommandException {
-      List var2 = matchEntities(var0, var1, Entity.class);
+      List<Entity> var2 = matchEntities(var0, var1, Entity.class);
       if(var2.isEmpty()) {
          return null;
       } else {
@@ -117,7 +117,7 @@
             String var5 = var3.group(1);
             BlockPos var6 = getBlockPosFromArguments(var4, var0.getPosition());
             Vec3d var7 = getPosFromArguments(var4, var0.getPositionVector());
-            List var8 = getWorlds(var0, var4);
+            List<World> var8 = getWorlds(var0, var4);
             ArrayList var9 = Lists.newArrayList();
 
             for(World var11 : var8) {
@@ -216,17 +216,17 @@
       if(var2 == null) {
          return var1;
       } else {
-         final boolean var3 = var2.startsWith("!");
-         if(var3) {
+         final boolean[] var3 = new boolean[] { var2.startsWith("!") };
+         if(var3[0]) {
             var2 = var2.substring(1);
          }
 
-         final GameType var4;
+         final GameType[] var4 = new GameType[1];
          try {
             int var5 = Integer.parseInt(var2);
-            var4 = GameType.parseGameTypeWithDefault(var5, GameType.NOT_SET);
+            var4[0] = GameType.parseGameTypeWithDefault(var5, GameType.NOT_SET);
          } catch (Throwable var6) {
-            var4 = GameType.parseGameTypeWithDefault(var2, GameType.NOT_SET);
+            var4[0] = GameType.parseGameTypeWithDefault(var2, GameType.NOT_SET);
          }
 
          var1.add(new Predicate<Entity>() {
@@ -236,7 +236,7 @@
                } else {
                   EntityPlayerMP var2 = (EntityPlayerMP)var1;
                   GameType var3x = var2.interactionManager.getGameType();
-                  return var3?var3x != var4:var3x == var4;
+                  return var3[0]?var3x != var4[0]:var3x == var4[0];
                }
             }
          });
@@ -246,13 +246,13 @@
 
    private static List<Predicate<Entity>> getTeamPredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, ARGUMENT_TEAM_NAME);
-      final boolean var3 = var2 != null && var2.startsWith("!");
+      final String[] var2 = new String[] { getArgument(var0, ARGUMENT_TEAM_NAME) };
+      final boolean var3 = var2 != null && var2[0].startsWith("!");
       if(var3) {
-         var2 = var2.substring(1);
+         var2[0] = var2[0].substring(1);
       }
 
-      if(var2 != null) {
+      if(var2[0] != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
                if(!(var1 instanceof EntityLivingBase)) {
@@ -261,7 +261,7 @@
                   EntityLivingBase var2x = (EntityLivingBase)var1;
                   Team var3x = var2x.getTeam();
                   String var4 = var3x == null?"":var3x.getName();
-                  return var4.equals(var2) != var3;
+                  return var4.equals(var2[0]) != var3;
                }
             }
          });
@@ -271,7 +271,7 @@
    }
 
    private static List<Predicate<Entity>> getScorePredicates(final ICommandSender var0, Map<String, String> var1) {
-      final Map var2 = getScoreMap(var1);
+      final Map<String, Integer> var2 = getScoreMap(var1);
       return (List<Predicate<Entity>>)(var2.isEmpty()?Collections.emptyList():Lists.newArrayList(new Predicate[]{new Predicate<Entity>() {
          public boolean apply(@Nullable Entity var1) {
             if(var1 == null) {
@@ -316,16 +316,16 @@
 
    private static List<Predicate<Entity>> getNamePredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, ARGUMENT_PLAYER_NAME);
-      final boolean var3 = var2 != null && var2.startsWith("!");
+      final String[] var2 = new String[] { getArgument(var0, ARGUMENT_PLAYER_NAME) };
+      final boolean var3 = var2 != null && var2[0].startsWith("!");
       if(var3) {
-         var2 = var2.substring(1);
+         var2[0] = var2[0].substring(1);
       }
 
       if(var2 != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
-               return var1 != null && var1.getName().equals(var2) != var3;
+               return var1 != null && var1.getName().equals(var2[0]) != var3;
             }
          });
       }
@@ -335,16 +335,17 @@
 
    private static List<Predicate<Entity>> getTagPredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, ARGUMENT_ENTITY_TAG);
-      final boolean var3 = var2 != null && var2.startsWith("!");
+      String[] var2 = new String [] { getArgument(var0, ARGUMENT_ENTITY_TAG) };
+      final boolean var3 = var2[0] != null && var2[0].startsWith("!");
       if(var3) {
-         var2 = var2.substring(1);
+         var2[0] = var2[0].substring(1);
       }
 
       if(var2 != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
-               return var1 == null?false:("".equals(var2)?var1.getTags().isEmpty() != var3:var1.getTags().contains(var2) != var3);
+               return var1 == null?false:("".equals(var2[0])?var1.getTags().isEmpty() !=
+                       var3:var1.getTags().contains(var2[0]) != var3);
             }
          });
       }
@@ -472,7 +473,7 @@
 
       Entity var7 = var2.getCommandSenderEntity();
       if(var7 != null && var3.isAssignableFrom(var7.getClass()) && var6 == 1 && ((List)var0).contains(var7) && !"r".equals(var4)) {
-         var0 = Lists.newArrayList(new Entity[]{var7});
+         var0 = (List<T>)Lists.newArrayList(new Entity[]{var7});
       }
 
       if(var6 != 0) {
